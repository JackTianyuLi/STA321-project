package driver;import mapper.Mapper2;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.FileSystem;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;import reducer.StockReducer;import java.io.IOException;import java.util.ArrayList;import java.util.Calendar;import java.util.List;public class StockDriver {    public static Configuration conf = new Configuration();    public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {        Job job = Job.getInstance(conf, "JoinExample");        job.setJarByClass(StockDriver.class);        conf.set("mapreduce.framework.name", "local"); // 1G        // set parameters//        String SecurityIDQueried = args[0]; // stock number//        String TWindow = args[1]; // time window; unit: second        String SecurityIDQueried = "000001"; // stock number        Mapper2.TimeWindow= 1200;        Mapper2.filter=SecurityIDQueried;        Path tradePath = new Path("data/am_hq_trade_spot.txt"); // set trade file path        Path outputPath = new Path("output"); // set output file path//        Path orderPath = new Path(args[2]);//        Path tradePath = new Path( args[3]);//        Path outputPath = new Path(args[4]);//        STA321-project//        hadoop jar STA321-project.jar 000001 600 /data/am_hq_order_spot.txt /data/am_hq_trade_spot.txt /output        // set classes        MultipleInputs.addInputPath(job, tradePath, TextInputFormat.class, Mapper2.class);        // set reducers        job.setReducerClass(StockReducer.class);        job.setNumReduceTasks(1);        // set output k/v        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(Text.class);        // get file system        TextOutputFormat.setOutputPath(job, outputPath);//         System.out.println("output 252path: " + outputPath);        // submit task and wait for completion        try {            System.exit(job.waitForCompletion(true) ? 0 : 1);        } catch (Exception e) {            e.printStackTrace(); // output complete error informatiob            System.exit(1);        }    }    public static List<String> createTimeSlots(int TimeWindowInSeconds) {        List<String> timeSlots = new ArrayList<>();        // 设置基准时间为2019年1月2日9:30        Calendar calendar = Calendar.getInstance();        calendar.set(2019, Calendar.JANUARY, 2, 9, 30);        // 9:30到12:00的时间窗口        while (calendar.get(Calendar.HOUR_OF_DAY) < 12) {            timeSlots.add(formatTime(calendar)); // 添加当前时间窗口            calendar.add(Calendar.SECOND, TimeWindowInSeconds); // 递增时间窗口        }        // 13:00到15:00的时间窗口        calendar.set(2019, Calendar.JANUARY, 2, 13, 0); // 重置为13:00        while (calendar.get(Calendar.HOUR_OF_DAY) < 15) {            timeSlots.add(formatTime(calendar)); // 添加当前时间窗口            calendar.add(Calendar.SECOND, TimeWindowInSeconds); // 递增时间窗口        }        return timeSlots;    }    private static String formatTime(Calendar calendar) {        int year = calendar.get(Calendar.YEAR);        int month = calendar.get(Calendar.MONTH) + 1; // 月份从0开始        int day = calendar.get(Calendar.DAY_OF_MONTH);        int hour = calendar.get(Calendar.HOUR_OF_DAY);        int minute = calendar.get(Calendar.MINUTE);        return String.format("%d%02d%02d%02d%02d00000", year, month, day, hour, minute);    }}